import{createVitePlugin as L}from"unplugin";import{red as V,normalizePath as g,checkNodeVersion as I,normalizeOptions as j,handleErrors as q,Output as M}from"@codecov/bundler-plugin-core";import r from"node:path";const B="@codecov/vite-plugin",$="0.0.1-beta.10",k=({output:e})=>({version:"1",name:B,pluginVersion:$,buildStart:()=>{e.start(),e.setPlugin(B,$)},buildEnd:()=>{e.end()},writeBundle:async()=>{await e.write()},vite:{generateBundle(s,o){if(!e.bundleName||e.bundleName===""){V("Bundle name is not present or empty. Skipping upload.");return}e.setBundleName(e.bundleName),s.name&&s.name!==""&&e.setBundleName(`${e.bundleName}-${s.name}`);const l=s.format==="es"?"esm":s.format;e.setBundleName(`${e.bundleName}-${l}`);const u=process.cwd(),m=[],y=[],c=new Map,P=Object.values(o),a={moduleOriginalSize:!1,...s};let d="";typeof a.assetFileNames=="string"&&(d=a.assetFileNames);let N="";typeof a.chunkFileNames=="string"&&(N=a.chunkFileNames);let b=0;for(const n of P){if(n?.type==="asset")if(typeof n.source=="string"){const t=n?.fileName??"",i=Buffer.from(n.source).byteLength;if(r.extname(t)===".map")continue;m.push({name:t,size:i,normalized:g(t,d)})}else{const t=n?.fileName??"",i=n?.source.byteLength;if(r.extname(t)===".map")continue;m.push({name:t,size:i,normalized:g(t,d)})}if(n?.type==="chunk"){const t=n?.name??"",i=n?.fileName??"",x=Object.entries(n?.modules??{}),E=Buffer.from(n?.code).byteLength,p=`${b}-${t}`;if(r.extname(i)===".map")continue;m.push({name:i,size:E,normalized:g(i,N)}),y.push({id:t,uniqueId:p,entry:n?.isEntry,initial:n?.isDynamicEntry,files:[i],names:[n?.name]});for(const[F,v]of x){const O=F.replace("\0",""),f=r.relative(u,O),h=f.match(/^\.\./)?f:`.${r.sep}${f}`,z=c.get(h);if(z)z.chunkUniqueIds.push(p);else{const S=a.moduleOriginalSize?v.originalLength:v.renderedLength,A={name:h,size:S,chunkUniqueIds:[p]};c.set(h,A)}}b+=1}}const w=Array.from(c.values());e.bundler={name:"rollup",version:this.meta.rollupVersion},e.assets=m,e.chunks=y,e.modules=w,e.outputPath=s.dir??"",e.dryRun&&this.emitFile({type:"asset",fileName:`${e.bundleName}-stats.json`,source:e.bundleStatsToJson()})}}}),U=L((e,s)=>{if(I(s))return[];const o=j(e);if(!o.success){const{shouldExit:u}=q(o);return u&&process.exit(1),[]}const l=[];if(o.options.enableBundleAnalysis){const u=new M(o.options);l.push(k({output:u}))}return l}),_=U,D=k;export{D as _internal_viteBundleAnalysisPlugin,_ as codecovVitePlugin};
//# sourceMappingURL=index.mjs.map
