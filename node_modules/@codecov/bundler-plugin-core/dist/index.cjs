"use strict";const semver=require("semver"),r$4=require("chalk"),zod=require("zod"),o$8=require("child_process"),web=require("node:stream/web");function _interopDefaultCompat($){return $&&typeof $=="object"&&"default"in $?$.default:$}const r__default=_interopDefaultCompat(r$4),o__default=_interopDefaultCompat(o$8);function prepareMessage($){return typeof $=="string"?$:$ instanceof Error?`${$.stack??""}`:JSON.stringify($,null,"	")}function l$c($){console.log(`[codecov] ${$}`)}function green($){return l$c(r__default.green(prepareMessage($)))}function red($){return l$c(r__default.red(prepareMessage($)))}function cyan($){return l$c(r__default.cyan(prepareMessage($)))}function debug($,{enabled:S=!0}={enabled:!0}){if(S)return l$c(r__default.italic.yellow(prepareMessage($)))}const e$2=">=18.18.0";function checkNodeVersion($){return semver.satisfies(process.version,e$2)?!1:(red(`Codecov ${$.framework} bundler plugin requires Node.js ${e$2}. You are using Node.js ${process.version}. Please upgrade your Node.js version.`),!0)}const l$b=/^[\w\d_:/@\.{}\[\]$-]+$/,u$h=zod.z.object({branch:zod.z.string({invalid_type_error:"`branch` must be a string."}).optional(),build:zod.z.string({invalid_type_error:"`build` must be a string."}).optional(),pr:zod.z.string({invalid_type_error:"`pr` must be a string."}).optional(),sha:zod.z.string({invalid_type_error:"`sha` must be a string."}).optional(),slug:zod.z.string({invalid_type_error:"`slug` must be a string."}).optional()}),p$4=$=>zod.z.object({apiUrl:zod.z.string({invalid_type_error:"`apiUrl` must be a string."}).url({message:`apiUrl: \`${$?.apiUrl}\` is not a valid URL.`}).default("https://api.codecov.io"),bundleName:zod.z.string({invalid_type_error:"`bundleName` must be a string.",required_error:"`bundleName` is required for uploading bundle analysis information."}).regex(l$b,{message:`bundleName: \`${$?.bundleName}\` does not match format: \`/^[wd_:/@.{}[]$-]+$/\`.`}),dryRun:zod.z.boolean({invalid_type_error:"`dryRun` must be a boolean."}).default(!1),retryCount:zod.z.number({invalid_type_error:"`retryCount` must be a number."}).positive({message:"`retryCount` must be a positive number."}).int({message:"`retryCount` must be an integer."}).default(3),enableBundleAnalysis:zod.z.boolean({invalid_type_error:"`enableBundleAnalysis` must be a boolean."}).default(!1),uploadToken:zod.z.string({invalid_type_error:"`uploadToken` must be a string."}).optional(),uploadOverrides:u$h.optional(),debug:zod.z.boolean({invalid_type_error:"`debug` must be a boolean."}).default(!1)}),normalizeOptions=$=>{const S=p$4($).safeParse($);if(!S.success){const N=[],T=S.error.issues;for(const L of T)N.push(L.message);return{success:!1,errors:N}}return{options:S.data,success:!0}},handleErrors=$=>{let S=!1;for(const N of $.errors)N.includes("bundleName")&&(S=!0),red(N);return{shouldExit:S}},r$3=/[a-f0-9]{8,}/i,x=["[hash]","[contenthash]","[fullhash]","[chunkhash]"],g$i=$=>$.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d"),normalizePath=($,S)=>{const N=[];for(const L of x){const M=S.indexOf(L);M!==-1&&N.push({hashString:L,hashIndex:M})}let T=$;for(const L of N){const M=S.at(L.hashIndex-1)??"",G=`(?<leadingDelimiter>${g$i(M)})`;let w=S.at(L.hashIndex+L.hashString.length)??"";w==="["&&(w=".");const Y=`(?<endingDelimiter>${g$i(w)})`,F=`(${G}(?<hash>[0-9a-zA-Z/+=-]+)${Y})`,j=new RegExp(F,"i");T=T.replace(j,"$<leadingDelimiter>*$<endingDelimiter>")}return T===$&&r$3.test(T)?T.replace(r$3,"*"):T};class FailedFetchError extends Error{constructor(S){super(S)}}class NoUploadTokenError extends Error{constructor(S){super(S)}}class UploadLimitReachedError extends Error{constructor(S){super(S)}}const SPAWN_PROCESS_BUFFER_SIZE=104857600,DEFAULT_RETRY_COUNT=3,DEFAULT_RETRY_DELAY=1e3,OWNER_SLUG_JOIN=":::",REPO_SLUG_JOIN="::::";class BadResponseError extends Error{constructor(S){super(S)}}const delay=$=>new Promise(S=>setTimeout(S,$)),fetchWithRetry=async({url:$,retryCount:S,requestData:N,name:T})=>{let L=new Response(null,{status:400});for(let M=0;M<S+1;M++)try{if(debug(`Attempting to fetch ${T}, attempt: ${M+1}`),await delay(DEFAULT_RETRY_DELAY*M),L=await fetch($,N),!L.ok)throw new BadResponseError("Response not ok");break}catch(G){if(debug(`${T} fetch attempt ${M+1} failed`),M+1===S){if(red(`${T} failed after ${M} attempts`),!(G instanceof BadResponseError))throw G;return L}}return L};class InvalidSlugError extends Error{constructor(S){super(S)}}const preProcessBody=$=>{for(const[S,N]of Object.entries($))S==="slug"&&typeof N=="string"&&($[S]=encodeSlug(N)),(!N||N==="")&&($[S]=null);return $},encodeSlug=$=>{const S=$.lastIndexOf("/")+1,N=$.substring(0,S).trimEnd(),T=$.substring(S,$.length);if(N===""||T==="")throw red("Invalid owner and/or repo"),new InvalidSlugError("Invalid owner and/or repo");return[N?.split("/").join(OWNER_SLUG_JOIN).slice(0,-3),T].join(REPO_SLUG_JOIN)},R$8=zod.z.object({url:zod.z.string()}),getPreSignedURL=async({apiURL:$,uploadToken:S,serviceParams:N,retryCount:T=DEFAULT_RETRY_COUNT})=>{if(!S)throw red("No upload token found"),new NoUploadTokenError("No upload token found");const L=`${$}/upload/bundle_analysis/v1`;let M;try{M=await fetchWithRetry({url:L,retryCount:T,name:"`get-pre-signed-url`",requestData:{method:"POST",headers:{"Content-Type":"application/json",Authorization:`token ${S}`},body:JSON.stringify(preProcessBody(N))}})}catch{throw red("Failed to fetch pre-signed URL"),new FailedFetchError("Failed to fetch pre-signed URL")}if(M.status===429)throw red("Upload limit reached"),new UploadLimitReachedError("Upload limit reached");if(!M.ok)throw red("Failed to get pre-signed URL, bad response"),new FailedFetchError("Failed to get pre-signed URL");let G;try{G=await M.json()}catch{throw red("Failed to parse pre-signed URL body"),new FailedFetchError("Failed to parse pre-signed URL body")}const w=R$8.safeParse(G);if(!w.success)throw red("Failed to validate pre-signed URL"),new FailedFetchError("Failed to validate pre-signed URL");return green("Successfully pre-signed URL fetched"),w.data.url};function detect$l($){return($?.CI==="true"||$?.CI==="True")&&($?.APPVEYOR==="true"||$?.APPVEYOR==="True")}function n$3($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.APPVEYOR_JOB_ID??""}function O$1($){const{envs:S}=$;return S?.APPVEYOR_URL&&S?.APPVEYOR_REPO_NAME&&S?.APPVEYOR_BUILD_ID&&S?.APPVEYOR_JOB_ID?`${S?.APPVEYOR_URL}/project/${S?.APPVEYOR_REPO_NAME}/builds/${S?.APPVEYOR_BUILD_ID}/job/${S?.APPVEYOR_JOB_ID}`:""}function R$7($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.APPVEYOR_REPO_BRANCH??""}function i$1($){return $?.APPVEYOR_ACCOUNT_NAME&&$?.APPVEYOR_PROJECT_SLUG&&$?.APPVEYOR_BUILD_VERSION?`${$?.APPVEYOR_ACCOUNT_NAME}/${$?.APPVEYOR_PROJECT_SLUG}/${$?.APPVEYOR_BUILD_VERSION}`:""}function u$g($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.APPVEYOR_PULL_REQUEST_NUMBER??""}function o$7(){return"appveyor"}function getServiceName$l(){return"Appveyor CI"}function A($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.APPVEYOR_PULL_REQUEST_HEAD_COMMIT??T?.APPVEYOR_REPO_COMMIT??"";return debug(`Using commit: ${L??""}`,{enabled:S.debug}),L}function V($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.APPVEYOR_REPO_NAME??""}async function getServiceParams$l($,S){return{branch:R$7($),build:n$3($),buildURL:O$1($),commit:A($,S),job:i$1($.envs),pr:u$g($),service:o$7(),slug:V($)}}function getEnvVarNames$l(){return["APPVEYOR","APPVEYOR_ACCOUNT_NAME","APPVEYOR_BUILD_ID","APPVEYOR_BUILD_VERSION","APPVEYOR_JOB_ID","APPVEYOR_PROJECT_SLUG","APPVEYOR_PULL_REQUEST_HEAD_COMMIT","APPVEYOR_PULL_REQUEST_NUMBER","APPVEYOR_REPO_BRANCH","APPVEYOR_REPO_COMMIT","APPVEYOR_REPO_NAME","APPVEYOR_URL","CI"]}const r$2={__proto__:null,detect:detect$l,getEnvVarNames:getEnvVarNames$l,getServiceName:getServiceName$l,getServiceParams:getServiceParams$l};function runExternalProgram($,S=[]){const N=o__default.spawnSync($,S,{maxBuffer:SPAWN_PROCESS_BUFFER_SIZE});if(N.error)throw new Error(`Error running external program: ${N.error}`);return N.stdout.toString().trim()}function parseSlug($){if(typeof $!="string")return"";if($.match(/^(ssh|https?):/)){const S=($.split("//")[1]?.replace(".git","")??"")?.split("/")??"";return S.length>2?`${S[1]}/${S[2]}`:""}if($.match("@"))return $.split(":")[1]?.replace(".git","")??"";throw new Error(`Unable to parse slug URL: ${$}`)}function parseSlugFromRemoteAddr($){let S="";return $||($=runExternalProgram("git",["config","--get","remote.origin.url"])||""),$&&(S=parseSlug($)),S==="/"&&(S=""),S}function detect$k($){return!!$?.SYSTEM_TEAMFOUNDATIONSERVERURI}function c$m($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BUILD_BUILDNUMBER??""}function m$5($){const{envs:S}=$;return S?.SYSTEM_TEAMPROJECT&&S?.BUILD_BUILDID?`${S?.SYSTEM_TEAMFOUNDATIONSERVERURI}${S?.SYSTEM_TEAMPROJECT}/_build/results?buildId=${S?.BUILD_BUILDID}`:""}function I$8($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.BUILD_SOURCEBRANCH?N?.BUILD_SOURCEBRANCH.toString().replace("refs/heads/",""):""}function R$6($){return $?.BUILD_BUILDID??""}function E$4($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.SYSTEM_PULLREQUEST_PULLREQUESTNUMBER??N?.SYSTEM_PULLREQUEST_PULLREQUESTID??""}function a$f(){return"azure_pipelines"}function getServiceName$k(){return"Azure Pipelines"}function l$a($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N?.sha}`,{enabled:S.debug}),N.sha;let L=T?.BUILD_SOURCEVERSION??"";if(E$4($)){const M=/^[a-z0-9]{40} [a-z0-9]{40}$/,G=o__default.execFileSync("git",["show","--no-patch","--format=%P"]).toString().trimEnd();if(debug(`Merge commit message: ${G}`,{enabled:S.debug}),M.exec(G)){const w=G.split(" ");debug(`Split merge commit: ${w}`,{enabled:S.debug}),L=w?.[1]??""}}return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function d$c($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.BUILD_REPOSITORY_NAME??parseSlugFromRemoteAddr("")??""}async function getServiceParams$k($,S){return{branch:I$8($),build:c$m($),buildURL:m$5($),commit:l$a($,S),job:R$6($.envs),pr:E$4($),service:a$f(),slug:d$c($)}}function getEnvVarNames$k(){return["BUILD_BUILDID","BUILD_BUILDNUMBER","BUILD_SOURCEBRANCH","BUILD_SOURCEVERSION","SYSTEM_PULLREQUEST_PULLREQUESTID","SYSTEM_PULLREQUEST_PULLREQUESTNUMBER","SYSTEM_TEAMFOUNDATIONSERVERURI","SYSTEM_TEAMPROJECT"]}const o$6={__proto__:null,detect:detect$k,getEnvVarNames:getEnvVarNames$k,getServiceName:getServiceName$k,getServiceParams:getServiceParams$k},r$1=40,c$l=/^[0-9a-f]+$/;function validateSHA($,S=r$1){return zod.z.string().length(S).refine(N=>c$l.test(N)).safeParse($).success}function detect$j($){return!!$?.CI&&!!$?.BITBUCKET_BUILD_NUMBER}function g$h($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BITBUCKET_BUILD_NUMBER??""}function c$k(){return""}function a$e($){const{args:S,envs:N}=$;return S?.branch&&S?.branch!==""?S?.branch:N?.BITBUCKET_BRANCH??""}function B$2($){return $?.BITBUCKET_BUILD_NUMBER??""}function v$9($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.BITBUCKET_PR_ID??""}function U$4(){return"bitbucket"}function getServiceName$j(){return"Bitbucket"}function l$9($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;let L=T.BITBUCKET_COMMIT??"";return L&&validateSHA(L,12)&&(L=runExternalProgram("git",["rev-parse",L])),debug(`Using commit: ${L??""}`,{enabled:S.debug}),L??""}function d$b($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.BITBUCKET_REPO_FULL_NAME??""}async function getServiceParams$j($,S){return{branch:a$e($),build:g$h($),buildURL:c$k(),commit:l$9($,S),job:B$2($.envs),pr:v$9($),service:U$4(),slug:d$b($)}}function getEnvVarNames$j(){return["CI","BITBUCKET_BUILD_NUMBER"]}const m$4={__proto__:null,detect:detect$j,getEnvVarNames:getEnvVarNames$j,getServiceName:getServiceName$j,getServiceParams:getServiceParams$j};function detect$i($){return!!$?.CI&&!!$?.BITRISE_IO}function u$f($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BITRISE_BUILD_NUMBER??""}function s$e($){const{envs:S}=$;return S?.BITRISE_BUILD_URL??""}function I$7($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.BITRISE_GIT_BRANCH??""}function g$g(){return""}function _$8($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.BITRISE_PULL_REQUEST??""}function c$j(){return"bitrise"}function getServiceName$i(){return"Bitrise CI"}function a$d($,S){const{args:N,envs:T}=$;return N?.sha&&N.sha!==""?(debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha):(debug(`Using commit: ${T?.GIT_CLONE_COMMIT_HASH??""}`,{enabled:S.debug}),T?.GIT_CLONE_COMMIT_HASH??"")}function d$a($){const{args:S}=$;return S?.slug&&S.slug!==""?S.slug:parseSlugFromRemoteAddr("")??""}async function getServiceParams$i($,S){return{branch:I$7($),build:u$f($),buildURL:s$e($),commit:a$d($,S),job:g$g(),pr:_$8($),service:c$j(),slug:d$a($)}}function getEnvVarNames$i(){return["BITRISE_BUILD_NUMBER","BITRISE_BUILD_URL","BITRISE_GIT_BRANCH","BITRISE_IO","BITRISE_PULL_REQUEST","CI","GIT_CLONE_COMMIT_HASH"]}const i={__proto__:null,detect:detect$i,getEnvVarNames:getEnvVarNames$i,getServiceName:getServiceName$i,getServiceParams:getServiceParams$i};function detect$h($){return!!$?.BUILDKITE}function o$5($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BUILDKITE_BUILD_NUMBER??""}function u$e($){return $.envs?.BUILDKITE_BUILD_URL??""}function s$d($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.BUILDKITE_BRANCH??""}function U$3($){return $?.BUILDKITE_JOB_ID??""}function g$f($){const{args:S}=$;return S?.pr??""}function _getService(){return"buildkite"}function getServiceName$h(){return"Buildkite"}function c$i($,S){const{args:N,envs:T}=$;return N?.sha&&N.sha!==""?(debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha):(debug(`Using commit: ${N?.sha??T?.BUILDKITE_COMMIT}`,{enabled:S.debug}),T?.BUILDKITE_COMMIT??"")}function B$1($){const{args:S,envs:N}=$;return setSlug(S?.slug,N?.BUILDKITE_ORGANIZATION_SLUG,N?.BUILDKITE_PIPELINE_SLUG)}async function getServiceParams$h($,S){return{branch:s$d($),build:o$5($),buildURL:u$e($),commit:c$i($,S),job:U$3($.envs),pr:g$f($),service:_getService(),slug:B$1($)}}function getEnvVarNames$h(){return["BUILDKITE","BUILDKITE_BRANCH","BUILDKITE_BUILD_NUMBER","BUILDKITE_BUILD_URL","BUILDKITE_COMMIT","BUILDKITE_JOB_ID","BUILDKITE_PROJECT_SLUG"]}const t={__proto__:null,_getService,detect:detect$h,getEnvVarNames:getEnvVarNames$h,getServiceName:getServiceName$h,getServiceParams:getServiceParams$h};function detect$g($){return!!$?.CI&&!!$?.CIRCLECI}function s$b($){return $.envs?.CIRCLE_BUILD_URL??""}function u$d(){return"circleci"}function getServiceName$g(){return"CircleCI"}function c$h($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CIRCLE_BRANCH??""}function g$e($,S){const{args:N,envs:T}=$;return N?.sha&&N.sha!==""?(debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha):(debug(`Using commit: ${T?.CIRCLE_SHA1}`,{enabled:S.debug}),T?.CIRCLE_SHA1??"")}function C$4($){const{args:S,envs:N}=$,T=setSlug(S?.slug,N?.CIRCLE_PROJECT_USERNAME,N?.CIRCLE_PROJECT_REPONAME);return N?.CIRCLE_REPOSITORY_URL&&N?.CIRCLE_REPOSITORY_URL!==""?`${N?.CIRCLE_REPOSITORY_URL?.split(":")[1]?.split(".git")[0]}`:T}function R$5($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.CIRCLE_BUILD_NUM??""}function I$6($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.CIRCLE_PR_NUMBER??""}function E$3($){return $?.CIRCLE_NODE_INDEX??""}async function getServiceParams$g($,S){return{branch:c$h($),build:R$5($),buildURL:s$b($),commit:g$e($,S),job:E$3($.envs),pr:I$6($),service:u$d(),slug:C$4($)}}function getEnvVarNames$g(){return["CI","CIRCLECI"]}const s$c={__proto__:null,detect:detect$g,getEnvVarNames:getEnvVarNames$g,getServiceName:getServiceName$g,getServiceParams:getServiceParams$g};function detect$f($){return!!$?.CIRRUS_CI}function u$c($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.CIRRUS_BUILD_ID??""}function c$g(){return""}function g$d($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CIRRUS_BRANCH??""}function a$c($){return $?.CIRRUS_TASK_ID??""}function v$8($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.CIRRUS_PR??""}function R$4(){return"cirrus-ci"}function getServiceName$f(){return"Cirrus CI"}function d$9($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.CIRRUS_CHANGE_IN_REPO??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function I$5($){const{args:S,envs:N}=$;return setSlug(S?.slug,N?.CIRRUS_REPO_OWNER,N?.CIRRUS_REPO_NAME)}async function getServiceParams$f($,S){return{branch:g$d($),build:u$c($),buildURL:c$g(),commit:d$9($,S),job:a$c($.envs),pr:v$8($),service:R$4(),slug:I$5($)}}function getEnvVarNames$f(){return["CIRRUS_CI"]}const p$3={__proto__:null,detect:detect$f,getEnvVarNames:getEnvVarNames$f,getServiceName:getServiceName$f,getServiceParams:getServiceParams$f};function detect$e($){return!!$?.CF_PAGES}function o$4($){const{args:S}=$;return S?.build??""}function u$b(){return""}function s$a($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CF_PAGES_BRANCH??""}function g$c(){return""}function c$f($){const{args:S}=$;return S?.pr??""}function a$b(){return"cloudflare-pages"}function getServiceName$e(){return"Cloudflare Pages"}function P$1($,S){const{args:N,envs:T}=$;return N?.sha&&N.sha!==""?(debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha):(debug(`Using commit: ${T?.CF_PAGES_COMMIT_SHA??""}`,{enabled:S.debug}),T?.CF_PAGES_COMMIT_SHA??"")}function _$7($){const{args:S}=$;return S?.slug??""}async function getServiceParams$e($,S){return{branch:s$a($),build:o$4($),buildURL:u$b(),commit:P$1($,S),job:g$c(),pr:c$f($),service:a$b(),slug:_$7($)}}function getEnvVarNames$e(){return["CF_PAGES","CF_PAGES_COMMIT_SHA","CF_PAGES_BRANCH","CF_PAGES_URL"]}const e$1={__proto__:null,detect:detect$e,getEnvVarNames:getEnvVarNames$e,getServiceName:getServiceName$e,getServiceParams:getServiceParams$e};function detect$d($){return!!$?.CODEBUILD_CI}function o$3($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.CODEBUILD_BUILD_ID??""}function u$a(){return""}function E$2($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CODEBUILD_WEBHOOK_HEAD_REF?N?.CODEBUILD_WEBHOOK_HEAD_REF.replace(/^refs\/heads\//,""):""}function _$6($){return $?.CODEBUILD_BUILD_ID??""}function O($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.CODEBUILD_SOURCE_VERSION&&N?.CODEBUILD_SOURCE_VERSION.startsWith("pr/")?N?.CODEBUILD_SOURCE_VERSION.replace(/^pr\//,""):""}function D(){return"codebuild"}function getServiceName$d(){return"AWS CodeBuild"}function U$2($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.CODEBUILD_RESOLVED_SOURCE_VERSION??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function c$e($){const{args:S,envs:N}=$;return S?.slug&&S?.slug!==""?S?.slug:N?.CODEBUILD_SOURCE_REPO_URL?N?.CODEBUILD_SOURCE_REPO_URL.toString().replace(/^.*github.com\//,"").replace(/\.git$/,""):""}async function getServiceParams$d($,S){return{branch:E$2($),build:o$3($),buildURL:u$a(),commit:U$2($,S),job:_$6($.envs),pr:O($),service:D(),slug:c$e($)}}function getEnvVarNames$d(){return["CODEBUILD_BUILD_ID","CODEBUILD_CI","CODEBUILD_RESOLVED_SOURCE_VERSION","CODEBUILD_SOURCE_REPO_URL","CODEBUILD_SOURCE_VERSION","CODEBUILD_WEBHOOK_HEAD_REF"]}const a$a={__proto__:null,detect:detect$d,getEnvVarNames:getEnvVarNames$d,getServiceName:getServiceName$d,getServiceParams:getServiceParams$d};function detect$c($){return!!$?.DRONE}function s$9($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.DRONE_BUILD_NUMBER??""}function u$9($){const{envs:S}=$;return S?.DRONE_BUILD_LINK??S?.DRONE_BUILD_URL??S?.CI_BUILD_URL??""}function g$b($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S?.branch:N?.DRONE_BRANCH??""}function c$d(){return""}function _$5($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S?.pr:N?.DRONE_PULL_REQUEST??""}function a$9(){return"drone.io"}function getServiceName$c(){return"Drone"}function R$3($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.DRONE_COMMIT_SHA??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function v$7($){const{args:S,envs:N}=$;return S?.slug&&S?.slug!==""?S?.slug:N?.DRONE_REPO??""}async function getServiceParams$c($,S){return{branch:g$b($),build:s$9($),buildURL:u$9($),commit:R$3($,S),job:c$d(),pr:_$5($),service:a$9(),slug:v$7($)}}function getEnvVarNames$c(){return["DRONE","DRONE_BRANCH","DRONE_BUILD_NUMBER","DRONE_BUILD_URL","DRONE_COMMIT_SHA","DRONE_PULL_REQUEST","DRONE_REPO"]}const f$2={__proto__:null,detect:detect$c,getEnvVarNames:getEnvVarNames$c,getServiceName:getServiceName$c,getServiceParams:getServiceParams$c},n$2=zod.z.union([zod.z.string(),zod.z.number(),zod.z.boolean(),zod.z.null()]),jsonSchema=zod.z.lazy(()=>zod.z.union([n$2,zod.z.array(jsonSchema),zod.z.record(jsonSchema)]));function detect$b($){return!!$?.GITHUB_ACTIONS}function u$8($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.GITHUB_RUN_ID??""}async function U$1($){const S=`https://api.github.com/repos/${g$a($)}/actions/runs/${u$8($)}/jobs`,N=await fetch(S,{headers:{"User-Agent":"Awesome-Octocat-App"}});if(N.status!==200)return"";const T=await N.json(),L=jsonSchema.parse(T),{envs:M}=$;if(L&&typeof L=="object"&&"jobs"in L&&Array.isArray(L?.jobs)){for(const G of L?.jobs)if(G&&typeof G=="object"&&"name"in G&&G?.name==M?.GITHUB_JOB&&"html_url"in G&&typeof G?.html_url=="string")return G?.html_url}return""}async function I$4($){const{envs:S}=$,N=await U$1($);return N!==""?N:`${S?.GITHUB_SERVER_URL}/${g$a($)}/actions/runs/${u$8($)}`}function b($){const{args:S,envs:N}=$;if(S?.branch&&S.branch!=="")return S.branch;const T=/refs\/heads\/(.*)/.exec(N?.GITHUB_REF??"");let L;return T&&(L=T[1]),N?.GITHUB_HEAD_REF&&N?.GITHUB_HEAD_REF!==""&&(L=N?.GITHUB_HEAD_REF),L??""}function d$8($){return $?.GITHUB_WORKFLOW??""}function l$7($){const{args:S,envs:N}=$;if(S?.pr&&S.pr!=="")return S.pr;let T;if(N?.GITHUB_HEAD_REF&&N?.GITHUB_HEAD_REF!==""){const L=/refs\/pull\/([0-9]+)\/merge/.exec(N?.GITHUB_REF??"");L&&(T=L[1])}return T??""}function v$6(){return"github-actions"}function getServiceName$b(){return"GitHub Actions"}function H($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=l$7($);let M=T?.GITHUB_SHA;if(L){const G=/^[a-z0-9]{40} [a-z0-9]{40}$/,w=runExternalProgram("git",["show","--no-patch","--format=%P"]);if(debug(`Merge commit message: ${w}`,{enabled:S.debug}),G.exec(w)){const Y=w.split(" ");debug(`Split commit message: ${Y}`,{enabled:S.debug}),M=Y[1]}}return debug(`Using commit: ${M??""}`,{enabled:S.debug}),M??""}function g$a($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.GITHUB_REPOSITORY??""}async function getServiceParams$b($,S){return{branch:b($),build:u$8($),buildURL:await I$4($),commit:H($,S),job:d$8($.envs),pr:l$7($),service:v$6(),slug:g$a($)}}function getEnvVarNames$b(){return["GITHUB_ACTION","GITHUB_HEAD_REF","GITHUB_REF","GITHUB_REPOSITORY","GITHUB_RUN_ID","GITHUB_SERVER_URL","GITHUB_SHA","GITHUB_WORKFLOW"]}const l$8={__proto__:null,detect:detect$b,getEnvVarNames:getEnvVarNames$b,getServiceName:getServiceName$b,getServiceParams:getServiceParams$b};function detect$a($){return!!$?.GITLAB_CI}function u$7($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.CI_BUILD_ID??N?.CI_JOB_ID??""}function s$8(){return""}function I$3($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CI_BUILD_REF_NAME??N?.CI_COMMIT_REF_NAME??""}function g$9(){return""}function c$c($){const{args:S}=$;return S?.pr??""}function C$2(){return"gitlab"}function getServiceName$a(){return"GitLab CI"}function a$8($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.CI_MERGE_REQUEST_SOURCE_BRANCH_SHA??T?.CI_BUILD_REF??T?.CI_COMMIT_SHA??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function E$1($){const{args:S,envs:N}=$;if(S?.slug&&S?.slug!=="")return S?.slug;const T=N?.CI_BUILD_REPO??N?.CI_REPOSITORY_URL??"";return N?.CI_PROJECT_PATH??parseSlugFromRemoteAddr(T)??""}async function getServiceParams$a($,S){return{branch:I$3($),build:u$7($),buildURL:s$8(),commit:a$8($,S),job:g$9(),pr:c$c($),service:C$2(),slug:E$1($)}}function getEnvVarNames$a(){return["CI_BUILD_ID","CI_BUILD_REF","CI_BUILD_REF_NAME","CI_BUILD_REPO","CI_COMMIT_REF_NAME","CI_COMMIT_SHA","CI_JOB_ID","CI_MERGE_REQUEST_SOURCE_BRANCH_SHA","CI_PROJECT_PATH","CI_REPOSITORY_URL","GITLAB_CI"]}const C$3={__proto__:null,detect:detect$a,getEnvVarNames:getEnvVarNames$a,getServiceName:getServiceName$a,getServiceParams:getServiceParams$a};function detect$9($){return!!$?.CI&&!!$?.HEROKU_TEST_RUN_BRANCH}function s$7($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.HEROKU_TEST_RUN_ID??""}function g$8(){return""}function c$b($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.HEROKU_TEST_RUN_BRANCH??""}function a$7(){return""}function _$4($){const{args:S}=$;return S?.pr??""}function d$6(){return"heroku"}function getServiceName$9(){return"Heroku CI"}function l$6($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N?.sha;const L=T?.HEROKU_TEST_RUN_COMMIT_VERSION??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function U($){const{args:S}=$;return S?.slug&&S.slug!==""?S?.slug:parseSlugFromRemoteAddr("")}async function getServiceParams$9($,S){return{branch:c$b($),build:s$7($),buildURL:g$8(),commit:l$6($,S),job:a$7(),pr:_$4($),service:d$6(),slug:U($)}}function getEnvVarNames$9(){return["CI","HEROKU_TEST_RUN_BRANCH","HEROKU_TEST_RUN_COMMIT_VERSION","HEROKU_TEST_RUN_ID"]}const d$7={__proto__:null,detect:detect$9,getEnvVarNames:getEnvVarNames$9,getServiceName:getServiceName$9,getServiceParams:getServiceParams$9};function detect$8($){return!!$?.JENKINS_URL}function s$6($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BUILD_NUMBER??""}function g$7($){const{envs:S}=$;return S?.BUILD_URL?S?.BUILD_URL:""}function c$9($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.ghprbSourceBranch??N?.CHANGE_BRANCH??N?.GIT_BRANCH??N?.BRANCH_NAME??""}function a$6(){return""}function l$5($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.ghprbPullId??N?.CHANGE_ID??""}function d$5(){return"jenkins"}function getServiceName$8(){return"Jenkins CI"}function p$2($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.ghprbActualCommit??T?.GIT_COMMIT??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function m$3($){const{args:S}=$;return S?.slug&&S?.slug!==""?S?.slug:parseSlugFromRemoteAddr("")}async function getServiceParams$8($,S){return{branch:c$9($),build:s$6($),buildURL:g$7($),commit:p$2($,S),job:a$6(),pr:l$5($),service:d$5(),slug:m$3($)}}function getEnvVarNames$8(){return["BRANCH_NAME","BUILD_NUMBER","BUILD_URL","CHANGE_ID","GIT_BRANCH","GIT_COMMIT","JENKINS_URL","ghprbActualCommit","ghprbPullId","ghprbSourceBranch"]}const c$a={__proto__:null,detect:detect$8,getEnvVarNames:getEnvVarNames$8,getServiceName:getServiceName$8,getServiceParams:getServiceParams$8};function isProgramInstalled($){return!o__default?.spawnSync($)?.error}function detect$7(){return isProgramInstalled("git")}function c$8($){const{args:S}=$;return S?.build??""}function m$2(){return""}function l$4($){const{args:S,envs:N}=$,T=S?.branch??N?.GIT_BRANCH??N?.BRANCH_NAME??"";if(T!=="")return T;try{return runExternalProgram("git",["rev-parse","--abbrev-ref","HEAD"])}catch(L){throw new Error(`There was an error getting the branch name from git: ${L}`)}}function f$1(){return""}function p$1($){const{args:S}=$;return S?.pr??""}function h(){return""}function getServiceName$7(){return"Local"}function d$4($,S){const{args:N,envs:T}=$,L=N?.sha??T?.GIT_COMMIT??"";if(L!=="")return debug(`Using commit: ${L}`,{enabled:S.debug}),L;try{const M=runExternalProgram("git",["rev-parse","HEAD"]);return debug(`Using commit: ${M}`,{enabled:S.debug}),M}catch(M){throw new Error(`There was an error getting the commit SHA from git: ${M}`)}}function v$5($){const{args:S}=$;if(S?.slug&&S?.slug!=="")return S.slug;try{const N=runExternalProgram("git",["config","--get","remote.origin.url"]);return parseSlug(N)}catch(N){throw new Error(`There was an error getting the slug from git: ${N}`)}}async function getServiceParams$7($,S){return{branch:l$4($),build:c$8($),buildURL:m$2(),commit:d$4($,S),job:f$1(),pr:p$1($),service:h(),slug:v$5($)}}function getEnvVarNames$7(){return["BRANCH_NAME","CI","GIT_BRANCH","GIT_COMMIT"]}const u$6={__proto__:null,detect:detect$7,getEnvVarNames:getEnvVarNames$7,getServiceName:getServiceName$7,getServiceParams:getServiceParams$7};function detect$6($){return!!$?.NETLIFY}function u$5($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BUILD_ID??""}function s$5(){return""}function c$7($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S?.branch:N?.BRANCH??""}function g$6(){return""}function a$5($){const{args:S}=$;return S?.pr??""}function d$3(){return"netlify"}function getServiceName$6(){return"Netlify"}function l$3($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.COMMIT_REF??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function v$4($){const{args:S}=$;return S?.slug??""}async function getServiceParams$6($,S){return{branch:c$7($),build:u$5($),buildURL:s$5(),commit:l$3($,S),job:g$6(),pr:a$5($),service:d$3(),slug:v$4($)}}function getEnvVarNames$6(){return["NETLIFY","BUILD_ID","REPOSITORY_URL","BRANCH","HEAD","COMMIT_REF","CACHED_COMMIT_REF","PULL_REQUEST","REVIEW_ID"]}const n$1={__proto__:null,detect:detect$6,getEnvVarNames:getEnvVarNames$6,getServiceName:getServiceName$6,getServiceParams:getServiceParams$6};function detect$5($){return!!$?.RENDER}function o$2($){const{args:S}=$;return S?.build??""}function s$4(){return""}function u$4($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.RENDER_GIT_BRANCH??""}function R$2(){return""}function _$3($){const{args:S}=$;return S?.pr??""}function g$5(){return"render"}function getServiceName$5(){return"Render"}function c$6($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.RENDER_GIT_COMMIT??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function a$4($){const{args:S,envs:N}=$;return S?.slug&&S?.slug!==""?S?.slug:N?.RENDER_GIT_REPO_SLUG??""}async function getServiceParams$5($,S){return{branch:u$4($),build:o$2($),buildURL:s$4(),commit:c$6($,S),job:R$2(),pr:_$3($),service:g$5(),slug:a$4($)}}function getEnvVarNames$5(){return["RENDER","IS_PULL_REQUEST","RENDER_DISCOVERY_SERVICE","RENDER_EXTERNAL_HOSTNAME","RENDER_EXTERNAL_URL","RENDER_GIT_BRANCH","RENDER_GIT_COMMIT","RENDER_GIT_REPO_SLUG","RENDER_INSTANCE_ID","RENDER_SERVICE_ID","RENDER_SERVICE_NAME","RENDER_SERVICE_TYPE"]}const k={__proto__:null,detect:detect$5,getEnvVarNames:getEnvVarNames$5,getServiceName:getServiceName$5,getServiceParams:getServiceParams$5};function detect$4($){return!!$?.TEAMCITY_VERSION}function s$3(){return""}function g$4(){return"teamcity"}function getServiceName$4(){return"TeamCity"}function c$5($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.BRANCH_NAME??""}function a$3($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.BUILD_VCS_NUMBER??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function d$2($){const{args:S}=$;return S?.slug&&S.slug!==""?S.slug:parseSlugFromRemoteAddr("")??""}function l$2($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.BUILD_NUMBER??""}function m$1($){const{args:S}=$;return S?.pr??""}function v$3(){return""}async function getServiceParams$4($,S){return{branch:c$5($),build:l$2($),buildURL:s$3(),commit:a$3($,S),job:v$3(),pr:m$1($),service:g$4(),slug:d$2($)}}function getEnvVarNames$4(){return["TEAMCITY_VERSION"]}const I$2={__proto__:null,detect:detect$4,getEnvVarNames:getEnvVarNames$4,getServiceName:getServiceName$4,getServiceParams:getServiceParams$4};function detect$3($){return!!$?.CI&&!!$?.TRAVIS&&!$?.SHIPPABLE}function s$2($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.TRAVIS_JOB_NUMBER??""}function u$3(){return""}function g$3($){const{args:S,envs:N}=$;if(S?.branch&&S.branch!=="")return S.branch;let T="";return N?.TRAVIS_BRANCH!==N?.TRAVIS_TAG&&(T=N?.TRAVIS_PULL_REQUEST_BRANCH??N?.TRAVIS_BRANCH??""),T}function a$2($){return $?.TRAVIS_JOB_ID??""}function c$4($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.TRAVIS_PULL_REQUEST??""}function v$1(){return"travis"}function getServiceName$3(){return"Travis CI"}function l$1($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.TRAVIS_PULL_REQUEST_SHA??T?.TRAVIS_COMMIT??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function _$2($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.TRAVIS_REPO_SLUG??""}async function getServiceParams$3($,S){return{branch:g$3($),build:s$2($),buildURL:u$3(),commit:l$1($,S),job:a$2($.envs),pr:c$4($),service:v$1(),slug:_$2($)}}function getEnvVarNames$3(){return["TRAVIS"]}const v$2={__proto__:null,detect:detect$3,getEnvVarNames:getEnvVarNames$3,getServiceName:getServiceName$3,getServiceParams:getServiceParams$3};function detect$2($){return!!$?.VERCEL}function o$1($){const{args:S}=$;return S?.build??""}function s$1(){return""}function u$2($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.VERCEL_GIT_COMMIT_REF??""}function R$1(){return""}function c$3($){const{args:S}=$;return S?.pr??""}function g$2(){return"vercel"}function getServiceName$2(){return"Vercel"}function I$1($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.VERCEL_GIT_COMMIT_SHA??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function C$1($){const{args:S,envs:N}=$;if(S?.slug&&S.slug!=="")return S.slug;let T="";const L=N?.VERCEL_GIT_REPO_OWNER??"",M=N?.VERCEL_GIT_REPO_SLUG??"";return L&&M&&(T=`${L}/${M}`),T}async function getServiceParams$2($,S){return{branch:u$2($),build:o$1($),buildURL:s$1(),commit:I$1($,S),job:R$1(),pr:c$3($),service:g$2(),slug:C$1($)}}function getEnvVarNames$2(){return["VERCEL","CI","VERCEL_ENV","VERCEL_URL","VERCEL_BRANCH_URL","VERCEL_REGION","VERCEL_AUTOMATION_BYPASS_SECRET","VERCEL_GIT_PROVIDER","VERCEL_GIT_REPO_SLUG","VERCEL_GIT_REPO_OWNER","VERCEL_GIT_REPO_ID","VERCEL_GIT_COMMIT_REF","VERCEL_GIT_COMMIT_SHA","VERCEL_GIT_COMMIT_MESSAGE","VERCEL_GIT_COMMIT_AUTHOR_NAME","VERCEL_GIT_PREVIOUS_SHA","VERCEL_GIT_PULL_REQUEST_ID"]}const y={__proto__:null,detect:detect$2,getEnvVarNames:getEnvVarNames$2,getServiceName:getServiceName$2,getServiceParams:getServiceParams$2};function detect$1($){return!!$?.WERCKER_MAIN_PIPELINE_STARTED}function u$1($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.WERCKER_MAIN_PIPELINE_STARTED??""}function c$2($){const{envs:S}=$;return S?.WERCKER_BUILD_URL??""}function g$1($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.WERCKER_GIT_BRANCH??""}function E(){return""}function a$1($){const{args:S}=$;return S?.pr??""}function R(){return"wercker"}function getServiceName$1(){return"Wercker CI"}function _$1($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.WERCKER_GIT_COMMIT??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function v($){const{args:S,envs:N}=$;return setSlug(S?.slug,N?.WERCKER_GIT_OWNER,N?.WERCKER_GIT_REPOSITORY)}async function getServiceParams$1($,S){return{branch:g$1($),build:u$1($),buildURL:c$2($),commit:_$1($,S),job:E(),pr:a$1($),service:R(),slug:v($)}}function getEnvVarNames$1(){return["WERCKER_MAIN_PIPELINE_STARTED"]}const B={__proto__:null,detect:detect$1,getEnvVarNames:getEnvVarNames$1,getServiceName:getServiceName$1,getServiceParams:getServiceParams$1};function detect($){return $?.CI==="woodpecker"}function s($){const{args:S,envs:N}=$;return S?.build&&S.build!==""?S.build:N?.CI_BUILD_NUMBER??""}function u($){const{envs:S}=$;return S?.CI_BUILD_LINK??""}function I($){const{args:S,envs:N}=$;return S?.branch&&S.branch!==""?S.branch:N?.CI_COMMIT_SOURCE_BRANCH??N?.CI_COMMIT_BRANCH??""}function _($){const{envs:S}=$;return S?.CI_JOB_NUMBER??""}function c$1($){const{args:S,envs:N}=$;return S?.pr&&S.pr!==""?S.pr:N?.CI_COMMIT_PULL_REQUEST??""}function g(){return"woodpecker"}function getServiceName(){return"Woodpecker CI"}function C($,S){const{args:N,envs:T}=$;if(N?.sha&&N.sha!=="")return debug(`Using commit: ${N.sha}`,{enabled:S.debug}),N.sha;const L=T?.CI_COMMIT_SHA??"";return debug(`Using commit: ${L}`,{enabled:S.debug}),L}function d$1($){const{args:S,envs:N}=$;return S?.slug&&S.slug!==""?S.slug:N?.CI_REPO??""}async function getServiceParams($,S){return{branch:I($),build:s($),buildURL:u($),commit:C($,S),pr:c$1($),job:_($),service:g(),slug:d$1($)}}function getEnvVarNames(){return["CI","CI_BUILD_NUMBER","CI_BUILD_LINK","CI_COMMIT_SOURCE_BRANCH","CI_COMMIT_BRANCH","CI_JOB_NUMBER","CI_COMMIT_PULL_REQUEST","CI_COMMIT_SHA","CI_COMMIT_TAG","CI_REPO"]}const P={__proto__:null,detect,getEnvVarNames,getServiceName,getServiceParams},providerList=[r$2,o$6,m$4,i,t,s$c,p$3,e$1,a$a,f$2,l$8,C$3,d$7,c$a,n$1,k,I$2,v$2,y,B,P,u$6];async function detectProvider($,S){cyan("Detecting CI provider");for(const N of providerList)if(N.detect($.envs))return cyan(`Detected CI provider: ${N.getServiceName()}`),await N.getServiceParams($,S);throw red("Could not detect CI provider"),new Error("Could not detect provider")}function setSlug($,S,N){return typeof $<"u"&&$!==""?$:typeof S<"u"&&typeof N<"u"&&S!==""&&N!==""?`${S}/${N}`:""}class FailedUploadError extends Error{constructor(S){super(S)}}async function uploadStats({message:$,bundleName:S,preSignedUrl:N,retryCount:T=DEFAULT_RETRY_COUNT}){const L=$[Symbol.iterator](),M=new web.ReadableStream({pull(w){const Y=L.next();Y.done?w.close():w.enqueue(Y.value)}}).pipeThrough(new web.TextEncoderStream);let G;try{G=await fetchWithRetry({url:N,retryCount:T,name:"`upload-stats`",requestData:{method:"PUT",headers:{"Content-Type":"application/json"},duplex:"half",body:M}})}catch{throw red("Failed to upload stats, fetch failed"),new FailedFetchError("Failed to upload stats")}if(G.status===429)throw red("Upload limit reached"),new UploadLimitReachedError("Upload limit reached");if(!G.ok)throw red(`Failed to upload stats, bad response. Response ${G.status} - ${G.statusText}`),new FailedUploadError("Failed to upload stats");return green(`Successfully uploaded stats for bundle: ${S}`),!0}var m=Object.defineProperty,c=($,S,N)=>S in $?m($,S,{enumerable:!0,configurable:!0,writable:!0,value:N}):$[S]=N,e=($,S,N)=>(c($,typeof S!="symbol"?S+"":S,N),N),p=($,S,N)=>{if(!S.has($))throw TypeError("Cannot "+N)},r=($,S,N)=>(p($,S,"read from private field"),N?N.call($):S.get($)),o=($,S,N)=>{if(S.has($))throw TypeError("Cannot add the same private member more than once");S instanceof WeakSet?S.add($):S.set($,N)},d=($,S,N,T)=>(p($,S,"write to private field"),T?T.call($,N):S.set($,N),N),l,a,n;class f{constructor(S){e(this,"apiUrl"),e(this,"dryRun"),e(this,"retryCount"),e(this,"enableBundleAnalysis"),e(this,"uploadToken"),e(this,"debug"),e(this,"originalBundleName"),e(this,"branch"),e(this,"build"),e(this,"pr"),e(this,"sha"),e(this,"slug"),e(this,"version"),e(this,"bundler"),e(this,"outputPath"),e(this,"builtAt"),e(this,"duration"),e(this,"assets"),e(this,"chunks"),e(this,"modules"),o(this,l,void 0),o(this,a,void 0),o(this,n,{bundleName:!1,pluginDetails:!1}),this.version="1",this.apiUrl=S.apiUrl,this.dryRun=S.dryRun,this.retryCount=S.retryCount,this.enableBundleAnalysis=S.enableBundleAnalysis,this.uploadToken=S.uploadToken,this.debug=S.debug,this.originalBundleName=S.bundleName,S.uploadOverrides&&(this.branch=S.uploadOverrides.branch,this.build=S.uploadOverrides.build,this.pr=S.uploadOverrides.pr,this.sha=S.uploadOverrides.sha,this.slug=S.uploadOverrides.slug),d(this,l,S.bundleName)}start(){this.builtAt=Date.now()}end(){this.duration=Date.now()-(this.builtAt??0)}lockBundleName(){r(this,n).bundleName=!0}unlockBundleName(){r(this,n).bundleName=!1}setBundleName(S){return r(this,n).bundleName||d(this,l,S),r(this,l)}get bundleName(){return r(this,l)}setPlugin(S,N){return r(this,n).pluginDetails||d(this,a,{name:S,version:N}),r(this,a)}get plugin(){return r(this,a)}lockPluginDetails(){r(this,n).pluginDetails=!0}unlockPluginDetails(){r(this,n).pluginDetails=!1}async write(){if(this.dryRun||!this.bundleName||this.bundleName==="")return;const S={branch:this.branch,build:this.build,pr:this.pr,sha:this.sha,slug:this.slug},N={envs:process.env,args:S},T=await detectProvider(N,this);let L="";try{L=await getPreSignedURL({apiURL:this?.apiUrl??"https://api.codecov.io",uploadToken:this?.uploadToken,serviceParams:T,retryCount:this?.retryCount})}catch{return}try{await uploadStats({preSignedUrl:L,bundleName:this.bundleName,message:this.bundleStatsToJson(),retryCount:this?.retryCount})}catch{return}}bundleStatsToJson(){const S={version:this.version,builtAt:this.builtAt,duration:this.duration,bundleName:this.bundleName??"",outputPath:this.outputPath,bundler:this.bundler,plugin:this.plugin,assets:this.assets,chunks:this.chunks,modules:this.modules};return JSON.stringify(S)}}l=new WeakMap,a=new WeakMap,n=new WeakMap,exports.Output=f,exports.checkNodeVersion=checkNodeVersion,exports.handleErrors=handleErrors,exports.normalizeOptions=normalizeOptions,exports.normalizePath=normalizePath,exports.red=red;
//# sourceMappingURL=index.cjs.map
