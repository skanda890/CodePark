// $t(
export const globalTFunctionMerger = {
    initial: 0 /* S.Idle */,
    step: (state, t, end) => {
        const type = t.customType;
        const token = t.token;
        switch (state) {
            case 0 /* S.Idle */:
                if (type === 'function.call' && token === '$t') {
                    return 1 /* S.ExpectBracket */;
                }
                else if (type === 'variable' && token === 'this') {
                    return 2 /* S.ExpectDot */;
                }
                else if (type === 'acessor.dot') {
                    return 4 /* S.Ignore */;
                }
                break;
            case 2 /* S.ExpectDot */:
                if (type === 'acessor.dot') {
                    return 3 /* S.ExpectCall */;
                }
                break;
            case 3 /* S.ExpectCall */:
                if (type === 'function.call' && token === '$t') {
                    return 1 /* S.ExpectBracket */;
                }
                break;
            case 1 /* S.ExpectBracket */:
                if (type === 'expression.begin') {
                    return end.MERGE_ALL;
                }
        }
    },
    customType: 'trigger.global.t.function',
};
