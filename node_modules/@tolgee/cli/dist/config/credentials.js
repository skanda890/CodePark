import { join, dirname } from 'path';
import { mkdir, readFile, writeFile } from 'fs/promises';
import { warn } from '../utils/logger.js';
import { CONFIG_PATH } from '../constants.js';
const API_TOKENS_FILE = join(CONFIG_PATH, 'authentication.json');
async function ensureConfigPath() {
    try {
        await mkdir(dirname(API_TOKENS_FILE));
    }
    catch (e) {
        if (e.code !== 'EEXIST') {
            throw e;
        }
    }
}
async function loadStore() {
    try {
        await ensureConfigPath();
        const storeData = await readFile(API_TOKENS_FILE, 'utf8');
        return JSON.parse(storeData);
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            throw e;
        }
    }
    return {};
}
async function saveStore(store) {
    const blob = JSON.stringify(store);
    await writeFile(API_TOKENS_FILE, blob, {
        mode: 0o600,
        encoding: 'utf8',
    });
}
async function storePat(store, instance, pat) {
    return saveStore({
        ...store,
        [instance.hostname]: {
            ...(store[instance.hostname] || {}),
            user: pat,
        },
    });
}
async function storePak(store, instance, projectId, pak) {
    return saveStore({
        ...store,
        [instance.hostname]: {
            ...(store[instance.hostname] || {}),
            projects: {
                ...(store[instance.hostname]?.projects || {}),
                [projectId.toString(10)]: pak,
            },
        },
    });
}
export async function savePat(instance, pat) {
    const store = await loadStore();
    return storePat(store, instance, pat);
}
export async function savePak(instance, projectId, pak) {
    const store = await loadStore();
    return storePak(store, instance, projectId, pak);
}
export async function getApiKey(instance, projectId) {
    const store = await loadStore();
    if (!store[instance.hostname]) {
        return null;
    }
    const scopedStore = store[instance.hostname];
    if (scopedStore.user) {
        if (scopedStore.user.expires !== 0 &&
            Date.now() > scopedStore.user.expires) {
            warn(`Your personal access token for ${instance.hostname} expired.`);
            await storePat(store, instance, undefined);
            return null;
        }
        return scopedStore.user.token;
    }
    if (projectId <= 0) {
        return null;
    }
    const pak = scopedStore.projects?.[projectId.toString(10)];
    if (pak) {
        if (pak.expires !== 0 && Date.now() > pak.expires) {
            warn(`Your project API key for project #${projectId} on ${instance.hostname} expired.`);
            await storePak(store, instance, projectId, undefined);
            return null;
        }
        return pak.token;
    }
    return null;
}
export async function saveApiKey(instance, token) {
    const store = await loadStore();
    if (token.type === 'PAT') {
        return storePat(store, instance, {
            token: token.key,
            expires: token.expires,
        });
    }
    return storePak(store, instance, token.project.id, {
        token: token.key,
        expires: token.expires,
    });
}
export async function removeApiKeys(api) {
    const store = await loadStore();
    return saveStore({
        ...store,
        [api.hostname]: {},
    });
}
export async function clearAuthStore() {
    return saveStore({});
}
